<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--suppress ALL -->
<mapper namespace="cn.ddzu.shop.dao.BuildingMapperDao">
    <update id="drop">
        drop table if exists building
    </update>

    <update id="create">
        create table building
        (
            id              bigint,
            name            varchar(255),
            zone_id         bigint,
            address         varchar(255),
            metro_name_list varchar(255),
            introduce       varchar(2048),
            notes           varchar(8192),
            img_list        varchar(8192),
            edit_time       date,
            hot             boolean default false,
            valid           boolean default true,
            primary key (id)
        ) default charset = utf8
    </update>

    <select id="selectAll" resultType="cn.ddzu.shop.entity.Building">
        select * from building
    </select>

    <insert id="insert" parameterType="cn.ddzu.shop.entity.Building">
        insert into building (id, name, zone_id, address, metro_name_list, introduce, notes, img_list, edit_time, hot, valid) values (
            #{data.id},
            #{data.name},
            #{data.zone_id},
            #{data.address},
            #{data.metro_name_list},
            #{data.introduce},
            #{data.notes},
            #{data.img_list},
            #{data.edit_time},
            #{data.hot},
            true
        )
    </insert>

    <update id="update" parameterType="cn.ddzu.shop.entity.Building">
        update building
        set
            name = #{data.name},
            zone_id = #{data.zone_id},
            address = #{data.address},
            metro_name_list = #{data.metro_name_list},
            introduce = #{data.introduce},
            notes = #{data.notes},
            img_list = #{data.img_list},
            edit_time = #{data.edit_time},
            hot = #{data.hot}
        where id = #{data.id}
    </update>

    <update id="delete" parameterType="java.lang.Long">
        update building
        set valid = false
        where id = #{id}
    </update>

    <select id="selectById" parameterType="java.lang.Long" resultType="cn.ddzu.shop.entity.Building">
        select
        building.id,
        building.name,
        building.zone_id,
        building.address,
        building.metro_name_list,
        building.introduce,
        building.notes,
        building.img_list,
        district.id as district_id,
        district.name as district_name,
        zone.name as zone_name
        from building
        left join zone on building.zone_id = zone.id
        left join district on zone.district_id = district.id
        where building.valid = true and building.id = #{id}
    </select>

    <select id="select" resultType="cn.ddzu.shop.entity.Building">
        select building.id,
        building.name,
        building.zone_id,
        building.address,
        building.metro_name_list,
        building.introduce,
        building.notes,
        building.img_list,
        district.id as district_id,
        district.name as district_name,
        zone.name as zone_name
        from building
        left join zone on building.zone_id = zone.id
        left join district on zone.district_id = district.id
        where building.valid = true
        <if test="keyword != null">
            and building.name like "%"#{keyword}"%"
        </if>
        <if test="district_id == zone_id">
            and building.zone_id in
            (select zone.id from zone
            <if test="district_id != null">
                where district_id = #{district_id}
            </if>
            )
        </if>
        <if test="district_id != zone_id">
            and building.zone_id = #{zone_id}
        </if>
        <if test="metro_name != null">
            and building.metro_name_list like "%"#{metro_name}"%"
        </if>
        order by building.id desc
        <if test="step > 0">
            limit #{start}, #{step};
        </if>
    </select>

    <select id="selectWithOffice" resultType="cn.ddzu.shop.entity.Building">
        select building.id,
        building.name,
        building.zone_id,
        building.address,
        building.metro_name_list,
        building.introduce,
        building.notes,
        building.img_list,
        district.id as district_id,
        district.name as district_name,
        zone.name as zone_name
        from building
        left join office on building.id = office.building_id
        left join zone on building.zone_id = zone.id
        left join district on zone.district_id = district.id
        left join type on office.type_id = type.id
        left join area_range on office.area_range_id = area_range.id
        left join price_range on office.price_range_id = price_range.id
        left join decoration on office.decoration_id = decoration.id
        where building.valid = true and office.valid = true
        and office.id in (
        select min(office.id)
        from building
        left join office on building.id = office.building_id
        left join zone on building.zone_id = zone.id
        left join district on zone.district_id = district.id
        where building.valid = true and office.valid = true
        <if test="type_id != null">
            and office.type_id = #{type_id}
        </if>
        <if test="area_range_id != null">
            and office.area_range_id = #{area_range_id}
        </if>
        <if test="price_range_id != null">
            and office.price_range_id = #{price_range_id}
        </if>
        <if test="decoration_id != null">
            and office.decoration_id = #{decoration_id}
        </if>
        <if test="district_id == zone_id">
            and building.zone_id in
            (select zone.id
            from zone
            <if test="district_id != null">
                where district_id = #{district_id}
            </if>
            )
        </if>
        <if test="district_id != zone_id">
            and building.zone_id = #{zone_id}
        </if>
        group by office.building_id
        )
        <if test="keyword != null">
            and building.name like "%"#{keyword}"%"
        </if>
        <if test="metro_name != null">
            and building.metro_name_list like "%"#{metro_name}"%"
        </if>
        order by office.id desc
        <if test="step > 0">
            limit #{start}, #{step};
        </if>
    </select>

    <select id="count" resultType="java.lang.Integer">
        select count(*) from building
        where valid = true
        <if test="keyword != null">
            and building.name like "%"#{keyword}"%"
        </if>
        <if test="metro_name != null">
            and building.metro_name_list like "%"#{metro_name}"%"
        </if>
        <if test="district_id == zone_id">
            and building.zone_id in
            (select zone.id from zone
            <if test="district_id != null">
                where district_id = #{district_id}
            </if>
            )
        </if>
        <if test="district_id != zone_id">
            and building.zone_id = #{zone_id}
        </if>
    </select>

    <select id="countWithOffice" resultType="java.lang.Integer">
        select count(*) from (
        select count(*) as count from building
        left join office on building.id = office.building_id
        where building.valid = true and office.valid = true
        and office.id in (select min(id) from office
        <where>
            <if test="type_id != null">
                and office.type_id = #{type_id}
            </if>
            <if test="area_range_id != null">
                and office.area_range_id = #{area_range_id}
            </if>
            <if test="price_range_id != null">
                and office.price_range_id = #{price_range_id}
            </if>
            <if test="decoration_id != null">
                and office.decoration_id = #{decoration_id}
            </if>
        </where>
        group by office.building_id
        )
        <if test="keyword != null">
            and building.name like "%"#{keyword}"%"
        </if>
        <if test="metro_name != null">
            and building.metro_name_list like "%"#{metro_name}"%"
        </if>
        <if test="district_id == zone_id">
            and building.zone_id in
            (select zone.id from zone
            <if test="district_id != null">
                where district_id = #{district_id}
            </if>
            )
        </if>
        <if test="district_id != zone_id">
            and building.zone_id = #{zone_id}
        </if>
        group by building.id
        ) as a group by count;
    </select>

    <select id="selectWhereHot" resultType="cn.ddzu.shop.entity.Building" parameterType="java.lang.Integer">
        select
            id,
            name,
            zone_id,
            address,
            metro_name_list,
            introduce,
            notes,
            img_list,
            edit_time,
            hot
        from building
        where valid = true and hot = true
        order by edit_time desc
        limit #{limit}
    </select>

    <select id="selectWhereNew" resultType="cn.ddzu.shop.entity.Building" parameterType="java.lang.Integer">
        select
            id,
            name,
            zone_id,
            address,
            metro_name_list,
            introduce,
            notes,
            img_list,
            edit_time,
            hot
        from building
        where valid = true
        order by edit_time desc
        limit #{limit}
    </select>
</mapper>

